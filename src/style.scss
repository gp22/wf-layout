.box {
	padding: var(--space, 1.5rem);

	* {
		color: inherit;
	}
}

.center {
	box-sizing: content-box;
	margin-inline: auto;
	max-inline-size: 60ch;
	padding-inline-end: var(--space, 1.5rem);
	padding-inline-start: var(--space, 1.5rem);
}

.cluster {
	display: flex;
	flex-wrap: wrap;
	gap: var(--space, 1.5rem);
}

.cover {
	display: flex;
	flex-direction: column;
	/* ↓ Set a minimum height to match the viewport height
	(any minimum would be fine)
	 */
	min-block-size: 100vh;
	padding: var(--space, 1.5rem);

	> * {
		/* ↓ Give each child a top and bottom margin */
		margin-block: var(--space, 1.5rem);
	}

	> :first-child:not(.cover-centered) {
		/* ↓ Remove the top margin from the first-child
		if it _doesn't_ match the centered element */
		margin-block-start: 0;
	}

	> :last-child:not(.cover-centered) {
		/* ↓ Remove the bottom margin from the last-child
		if it _doesn't_ match the centered element */
		margin-block-end: 0;
	}

	> .cover-centered {
		/* ↓ Center the centered element
		in the available vertical space */
		margin-block: auto;
	}
}

.stack {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;

	> * {
		margin-block: 0;
	}

	> * + * {
		margin-block-start: var(--space, 1.5rem);
	}

	&:only-child {
		block-size: 100%;
	}

	//> :nth-child(2) {
	//	margin-block-end: auto;
	//}
}

.switcher {
	display: flex;
	flex-wrap: wrap;
	gap: var(--space, 1.5rem);
	/* ↓ The width at which the layout “breaks” */
	--threshold: 30rem;

	> * {
		flex-grow: 1;
		/* ↓ Switch the layout at the --threshold */
		flex-basis: calc((var(--threshold) - 100%) * 999);
	}

	> :nth-last-child(n+5),
	> :nth-last-child(n+5) ~ * {
		/* ↓ Switch to a vertical configuration if
		there are more than 4 child elements */
		flex-basis: 100%;
	}
}
